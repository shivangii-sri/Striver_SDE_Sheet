Approach: Boundary traversal in an anti-clockwise direction can be described as a traversal consisting of three parts:
Part 0: Add root
Part 1: Left Boundary excluding leaf.
Part 2: Leaf nodes from left to right.
Part 3: Right Boundary excluding leaf in REVERSE direction.

//TC = O(H) + O(N) +O(H)
//SC = O(N)- aux stack space

Leetcode premium ques- Code taken from : https://takeuforward.org/data-structure/boundary-traversal-of-a-binary-tree/
import java.util.*;
class Node {
    int data;
    Node left, right;
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}
public class Main {
    static Boolean isLeaf(Node root) {
        return (root.left == null) && (root.right == null);
    }

    static void addLeftBoundary(Node root, ArrayList < Integer > res) {
        Node cur = root.left;
        while (cur != null) {
            if (isLeaf(cur) == false) res.add(cur.data);
            if (cur.left != null) cur = cur.left;
            else cur = cur.right;
        }
    }
    static void addRightBoundary(Node root, ArrayList < Integer > res) {
        Node cur = root.right;
        ArrayList < Integer > temp = new ArrayList < Integer > ();
        while (cur != null) {
            if (isLeaf(cur) == false) temp.add(cur.data);
            if (cur.right != null) cur = cur.right;
            else cur = cur.left;
        }
        int i;
        for (i = temp.size() - 1; i >= 0; --i) {
            res.add(temp.get(i));
        }
    }

    static void addLeaves(Node root, ArrayList < Integer > res) {
        //why preorder ? why not inorder ? 
        if (isLeaf(root)) {
            res.add(root.data);
            return;
        }
        if (root.left != null) addLeaves(root.left, res);
        if (root.right != null) addLeaves(root.right, res);
    }
    static ArrayList < Integer > printBoundary(Node node) {
        ArrayList < Integer > ans = new ArrayList < Integer > ();
        if (isLeaf(node) == false) ans.add(node.data);
        addLeftBoundary(node, ans);
        addLeaves(node, ans);
        addRightBoundary(node, ans);
        return ans;
    }
    public static void main(String args[]){
      .............
      .............
    }
}
