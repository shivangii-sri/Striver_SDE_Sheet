//TC = O(N)
//SC = O(N) - aux stack space

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null || root == p|| root == q) {
            return root;
        }
        
        TreeNode left = lowestCommonAncestor(root.left , p , q);
        TreeNode right = lowestCommonAncestor(root.right , p , q);
        
        if(left == null) {
            return right;
        }
        if(right == null) {
            return left;
        }
        else { //both left and right are not null, we found our result
            return root;
        }
    }
}

//Brute force - 
1. Find root to node path for both the given nodes. 
2. Store the both the paths in some data structure separately
3. Compare the last most common node, thats your answer.
==> TC = O(2N)
==> SC = O(2N) - to store paths for both.
