//Approach :
1. Put inorder in Map
2. Use preorder to find root in inorder! , then get left and right subtree.

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        //1. Put inorder in Map
        Map<Integer , Integer> inMap = new HashMap<>();
        for(int i=0; i<inorder.length ; i++){
            inMap.put( inorder[i], i);
        }
        //2. Use preorder to find root in inorder! , then get left and right subtree.
        TreeNode root = construct(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1, inMap);
        return root;
    }
    public static TreeNode construct(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, Map<Integer , Integer> inMap){
        //base case- when start index crosses end index, return null.
        if(preStart > preEnd || inStart> inEnd) return null;
        //create root
        TreeNode root = new TreeNode(preorder[preStart]);
        //get index of root in inorder. Also get no of nodes in left subtree.
        int inRoot = inMap.get(root.val);
        int numsLeft = inRoot - inStart;
        
        root.left  = construct(preorder, preStart+1,           preStart+numsLeft, inorder,  inStart,  inRoot-1, inMap); //inRoot -1 = inStart_numsLeft-1
        root.right = construct(preorder, preStart+numsLeft+1,  preEnd,            inorder,  inRoot+1, inEnd,    inMap);        
        return root;
    }
}
