//Approach:
1. Put inorder in Map
2. Use PostOrder to find root in inorder! , then get left and right subtree.

class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        // Hash the inorder
        Map<Integer , Integer> inMap = new HashMap<>();
        for(int i=0; i<inorder.length ; i++){
            inMap.put(inorder[i] , i);
        }        
        //2. Use preorder to find root in inorder! , then get left and right subtree.
        TreeNode root = construct(inorder, 0, inorder.length-1, postorder, 0, postorder.length-1, inMap);        
        return root;
    }    
    private static TreeNode construct(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd, Map<Integer , Integer> inMap){
      //1. base case- when start index crosses end index, return null.
        if(inStart>inEnd || postStart>postEnd) return null;
      //2. Create Root
        TreeNode root = new TreeNode(postorder[postEnd]);
      //3. Get index of root in inorder. Also get no of nodes in left subtree.
        int inRoot = inMap.get(root.val);
        int numsLeft = inRoot - inStart;
            
        root.left  = construct(inorder, inStart,  inRoot-1, postorder, postStart,           postStart+numsLeft-1 , inMap);
        root.right = construct(inorder, inRoot+1, inEnd,    postorder, postStart+numsLeft,  postEnd-1 ,            inMap);
        
        return root;
    }
}
