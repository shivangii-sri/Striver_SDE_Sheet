DFS Approach-
//1. Start with a random node from graph
//2. Make a Vis array to keep track of visited nodes
//3. Print this current node, mark it as visited.
//4. Get  neighbour nodes and perform above steps recursively for each node deeply/depthly if node is unvisited.
//==>TC  = O(N+E) [N is time taken for visiting N ndoes, E is for travelling through adjacent nodes overall]
//==>SC = O(N+E) + O(N) + O(N) [adj list , vis array, queue]

class Solution {
public static ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj)
    {
        ArrayList<Integer> storeDfs = new ArrayList<>();     
        boolean vis[] = new boolean[V+1];      
        for(int i = 1;i<=V;i++) {
            if(!vis[i]) dfs(i, vis, adj, storeDfs);
        }
        return storeDfs;
    }
    public static void dfs(int node, boolean vis[], ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> storeDfs) {
        storeDfs.add(node);
        //marking current node as visited
        vis[node] = true;
        //getting neighbour nodes
        for(Integer it: adj.get(node)) {
            if(vis[it] == false) {
                dfs(it, vis, adj, storeDfs);
            }
        }
    }
 }



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

----------------Dad Code -----------

class Solution {
    ArrayList<Integer> dfs(ArrayList<Integer>[] adjList) {
     
    int noOfVertices=adjList.length;
    
    boolean[] visited=new boolean[noOfVertices];
    
    ArrayList<Integer> result=new ArrayList<Integer>();
    
    solUtil(0,adjList,result,visited); //NOTE : Start traversing from 0th index of Adjacency List
    
    return result;
    
    }
  
  
  public void solUtil(int index,ArrayList<Integer>[] adjList,ArrayList<Integer> result,boolean[] visited){
       
    visited[index]=true;
    
    result.add(index);
    
    int edgeLen=adjList[index].size();
    
    for(int i=0;i<edgeLen;i++){
      
      int node=adjList[index].get(i);
      
      if(!visited[node]){
        
        solUtil(node,adjList,result,visited);
      }
    }
  }
}
