// Bipartite - Graph Colouring - A graph that can be coloured using exactly two colours such that no two adjacent nodes has same colour.
// TC= O(N+E),  N is the time taken for visiting N nodes and E is for traveling through adjacent nodes overall. 
// SC= O(N+E) +  O(N) + O(N) , space for adjacent list , color array and auxiliary space

class Solution {
    public boolean isBipartite(int[][] graph) {
        //dfs
        int color[] = new int[graph.length];
        Arrays.fill(color , -1);
        
        for(int i=0; i<graph.length ; i++){
            if(color[i] == -1){
                if(dfs(i , graph, color) == false) return false;   
            }
        }
        return true;
    }
    public static boolean dfs(int node, int[][] graph, int[] color){
        if(color[node] == -1) color[node] = 1;       
        for(int it : graph[node]){
            if(color[it] == -1){
                color[it] = 1 - color[node];
                if(dfs(it , graph , color) == false) return false;                
            }
            else{
                if(color[it] == color[node] ) return false;
            }
        }
        return true;
    }
}
