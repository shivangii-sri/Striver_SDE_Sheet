==> Topological sort: The linear ordering of nodes/vertices such that if there exists an edge between 2 nodes u,v then ‘u’ appears before ‘v’.
// Topo Sort DFS uses:- vis[] , Stack<int> (To maintain the topo sort order)
// TC = O(N+E)  , N = Number of node , E = Number of Edges
// SC = O(N) + O(N) , stack<> and vis[]

Visited Array and Stack data structure. Both will be using O(N).
class Solution
{
    public static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {     
        Stack<Integer> st = new Stack<>();
        boolean vis[] = new boolean[V];       
        for(int i=0; i<V ; i++){
            if(vis[i] == false){
                 helper(i , st, vis , adj);
            }
        }
        int[] ans = new int[V];   
        int itr=0;
        while(!st.isEmpty()){
            ans[itr++] = st.pop();
        }
        return ans;
    }
    public static void helper(int i, Stack<Integer> st , boolean[] vis, ArrayList<ArrayList<Integer>> adj) {
        vis[i] = true;
        for(Integer it : adj.get(i)){
            if(vis[it] == false){
                helper(it, st,vis,adj);
            }
        }
        st.push(i);
    }
}
