// Bipartite - Graph Colouring - A graph that can be coloured using exactly two colours such that no two adjacent nodes has same colour.
// TC= O(N+E),  N is the time taken for visiting N nodes and E is for traveling through adjacent nodes overall. 
// SC= O(N+E) +  O(N) + O(N) , space for adjacent list , vis array and auxiliary space

class Solution {
    public boolean isBipartite(int[][] graph) {
        int color[] = new int[graph.length];
        Arrays.fill(color , -1);        
        for(int i=0; i<graph.length ; i++){           
            if(color[i] == -1){
                Queue<Integer> q = new LinkedList<Integer>();
                q.add(i);
                color[i] = 1;
                
                while(!q.isEmpty()){
                    Integer node = q.poll();
                    for(Integer it : graph[node]){
                        if(color[it] == -1){
                            color[it] = 1 - color[node];
                            q.add(it);
                        }
                        else if(color[it] == color[node])
                            return false;
                    }
                }
            }
        }
        return true;        
    }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Work@Tech Link BFS : https://workat.tech/problem-solving/practice/bfs-of-graph

class Solution {
    ArrayList<Integer> bfs(ArrayList<Integer>[] adjList) {
    
    int noOfvertices=adjList.length;
    
    boolean[] visited=new boolean[noOfvertices];
    
    ArrayList<Integer> result=new ArrayList<>();

    
    Queue<Integer> temp=new LinkedList<>();
    
    visited[0]=true;
    
    temp.add(0);
   
    while(!temp.isEmpty()){
      
      int index=temp.poll();
      result.add(index);
      
      int edges=adjList[index].size();
      
      for(int i=0;i<edges;i++){
        
        int node=adjList[index].get(i);
        
        if(!visited[node]){
          visited[node]=true;
          temp.add(node);
        }
      }
    }
    return result;   
    }
}
