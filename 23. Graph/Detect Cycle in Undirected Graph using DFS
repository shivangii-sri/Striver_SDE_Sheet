// Intuition : If the adjacent node of a current node is already visited and NOT equal to parent of the current node, means cycle is present in the undirected graph.
// TC= O(N+E),  N is the time taken for visiting N nodes and E is for traveling through adjacent nodes overall. 
// SC= O(N+E) +  O(N) + O(N) , space for adjacent list , vis array and auxiliary space


class Solution {
    // 0-based indexing Graph
    public boolean isCycle(int V, ArrayList < ArrayList < Integer >> adj) {
        boolean vis[] = new boolean[V];
        for (int i = 0; i < V; i++) {
            if (vis[i] == false) {
                if (checkForCycle(i, -1, vis, adj)) return true;                  
            }
        }
        return false;
    }
    public boolean checkForCycle(int node, int parent, boolean vis[], ArrayList<ArrayList<Integer>> adj) {
        vis[node] = true;
        for (Integer it: adj.get(node)) {
            if (vis[it] == false) {
                if (checkForCycle(it, node, vis, adj) == true)   return true;             
            } else if (it != parent)  return true; // CYCLE PRESENT             
        }
        return false;// not present
    }
}
