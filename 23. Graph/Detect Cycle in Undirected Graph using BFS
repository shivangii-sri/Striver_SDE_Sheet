// Intuition : If the adjacent node of a current node is already visited and NOT equal parent of the current node, means cycle is present in the undirected graph.
// TC= O(N+E),  N is the time taken for visiting N nodes and E is for traveling through adjacent nodes overall. 
// SC= O(N+E) +  O(N) + O(N) , space for adjacent list , vis array and auxiliary space

class Node { 
    int first; //->Node's value
    int second; //-> Node's parent
    public Node(int first, int second) {
        this.first = first;
        this.second = second; 
    }
}
class Solution
{
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj)
    {
        boolean vis[] = new boolean[V];
        Arrays.fill(vis,false);
        // travel all components
        for(int i=0;i<V;i++) {
            if(vis[i]==false) {
                if(helperCheckForCycle(i, adj,vis)==true) return true;
            }
        }
        return false;
    }
   static boolean helperCheckForCycle(int s, ArrayList<ArrayList<Integer>> adj, boolean vis[])
    {
       Queue<Node> q =  new LinkedList<>(); //BFS
       q.add(new Node(s, -1));
       vis[s] =true;
       
       while(!q.isEmpty())
       {
           int node = q.peek().first; // Node's value
           int par = q.peek().second; // Node's parent value
           q.remove();            
           for(Integer it: adj.get(node))
           {
               if(vis[it]==false)  
               {
                   q.add(new Node(it, node));
                   vis[it] = true; 
               }        
               else if(par != it) return true;
           }
       }      
       return false;
    }
}
