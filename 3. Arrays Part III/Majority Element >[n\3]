//Approach 3- Moore's Voting Algo -Most Optimal 
// We initialise 4 var: num1=-1, num2=-1, c1=0, c2=0
// We linearly traverse and find two no.s as as num1, num2. We again linearly traverse & find if count of num1 and num2 is > n/3. If yes, add to ans list
// TC=O(N)+O(N), SC= O(1)
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int num1 = -1;
        int num2 = -1;
        int count1 = 0; 
        int count2 = 0;
	    for (int i = 0; i < n; i++) {
            if (nums[i] == num1)
                count1++;
            else if (nums[i] == num2)
                count2++;
            else if (count1 == 0) {
                num1 = nums[i];
                count1 = 1;
            } else if (count2 == 0) {
                num2 = nums[i];
                count2 = 1;
            } else { // dont forget to write else part, to decr count
                count1--;
                count2--;
            }
	    }
        List<Integer> ans = new ArrayList<Integer>();
        count1 = 0;
        count2 = 0;
        for (int i = 0; i < len; i++) {
            if (nums[i] == num1)
                count1++;
            else if (nums[i] == num2)
                count2++;
        }
        if (count1 > len / 3)
            ans.add(num1);
        if (count2 > len / 3)
            ans.add(num2);
        return ans;    
    }
}

// Approach 2 - HashMap (Key-Value Pair)
//TC=O(N*logN) bcz you are linearly traversing in array to update map, then traversing in hashMap to search key's value takes O(1) in best case and O(logN) in worst,
//TC=O(N) if instead of a map you use a freq array, but for that the array elements must be within the range N
//SC = O(N)
class Solution {
  public List<Integer> majorityElement(int[] nums) {
    ArrayList<Integer> list =new ArrayList<>();
    HashMap<Integer,Integer>hm=new HashMap<>();
    // Step 1 -  Travel in array and store key-value pair as key->Freq in hashmap
    for(int val:nums){
        if(hm.containsKey(val)){
            int freq=hm.get(val);
            freq++;
            hm.put(val,freq);
        }
        else{
            hm.put(val,1);
        }
    }
    // Step2 -After updating map, travel in the map and check if any key has count > n/3 
     for(Integer i:hm.keySet()){
        if((nums.length/3)<hm.get(i)){
            list.add(i);
        }
    }
    return list;
  }
}
  
// Approach 1 Brute- Pick one element, and count the no. of occurences of that element in the array
// TC = O(n^2) , SC = O(1)
