// Fractional knapsack
//Approach -
//1. Sort acc. to value/weight. It should be type casted double
//2. Iterate in Items[] , check if (curWeight + weight of ith item) lies within W(Knapsack Weight). 
//3. If yes, pick entire item i.e add entire value to final value. If not pick fraction of item i.e add fractional value to final value.
// ==>TC = O(NlogN)+ O(N)  ==> SC = O(1)

class itemComparator implements Comparator<Item>{
    @Override
    public int compare(Item a , Item b){
        double r1 = (double)a.value / (double)a.weight;
        double r2 = (double)b.value / (double)b.weight;        
        if(r1 < r2) return 1;
        else if(r1 > r2) return -1;
        return 0;
    }
}
class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        //1. Sort acc to value/weight
        Arrays.sort(arr , new itemComparator());
        
        int curWeight = 0;
        double finalValue = 0.0;
        //2. Iterate in Items[] , check if (curWeight + weight of ith item) lies within W(Knapsack Weight). If yes, pick entire item i.e add entire value to final value.
        for(int i=0 ; i<n ; i++){
            if(curWeight + arr[i].weight <= W){
                curWeight += arr[i].weight;
                finalValue += arr[i].value;
            }
            else{  //3. If not pick fraction of item i.e add fractional value to final value.
                int remainWeight = W - curWeight;
                //curWeight += remainWeight;
                finalValue += (double)(arr[i].value)/(double)(arr[i].weight) * (double)remainWeight;
                break;
            }
            
        }
        return finalValue;
    }
}
