// TC = O(N) - traversing the entire string once from back
// SC = O(1)

class Solution {
    public String reverseWords(String s) {
        
        StringBuilder ans = new StringBuilder();       
        int n = s.length();
        
        int i=n-1;
        while(i>=0){
            // to trim extra spaces
            while(i>=0 && s.charAt(i) == ' ') i--;
            
            // j to keep track of end of word
            int j=i;
            // move 'i' to start of word
            while(i>=0 && s.charAt(i) != ' ') i--;
            
            // add the word into your ans if end of word is still at >=0 index. If ans empty, add the word directly, else add a space first and then the word.
            if(j>=0){
                if(ans.isEmpty() == true){
                    ans.append(s.substring(i+1,j+1));
                }
                else{
                    ans.append(" ");
                    ans.append(s.substring(i+1,j+1));
                }                
            }            
        }
        return ans.toString();
    }
}

-> Another solution
-> Leetcode discussion - Using Two Pointers | Regex to remove spaces
-> https://leetcode.com/problems/reverse-words-in-a-string/discuss/2173515/java-solution-using-two-pointers-simple-solution-with-explanation
