// OPtimal - Expand from Center Algorithm!
//TC = O(N^2)
//SC = O(1)

class Solution {
    public String longestPalindrome(String s) {
        int start = 0, end=0; //to keep track of answer wala start and end indexes
        //Iterate in the string
        for(int i=0; i<s.length() ; i++) {
            
            int len1 = expandCenter(s, i, i); //check palindrome for odd length
            int len2 = expandCenter(s, i, i+1); // check palindrome for even length
            int len = Math.max(len1, len2);
            
            if(end - start + 1 < len){ // compare if answer length < current len
                start = i-(len-1)/2; // IMP (len-1)/2
                end = i + (len)/2;
            }
        }
        return s.substring(start, end+1);
    }
    
    //Returns length of longest palidrome possible from given two indexes
    public static int expandCenter(String s, int i, int j) {
        while(i>=0 && j<s.length() && s.charAt(i) == s.charAt(j)){
            i--;
            j++;
        }
        return j-i-1;
    }
}
