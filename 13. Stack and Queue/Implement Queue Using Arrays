//Queue me intialize front and back with 0 index , not -1.

public class Queue {
    int[] arr;
    int front;
    int back;    
    Queue() {
        // Implement the Constructor
        front = 0;
        back = 0;
        arr = new int[5001];
    }
    boolean isEmpty() {
        // Implement the isEmpty() function
        return (front == back);
    }
    void enqueue(int data) {
        // Implement the enqueue() function //
        arr[back++] = data;      
    }
    int dequeue() {
        // Implement the dequeue() function
        if(front == back) return -1;
        int res = arr[front];
        front++;
        return res;      
    }
    int front() {
        // Implement the front() function //if not return -1
         if(front == back) return -1;
        return arr[front];       
    }
}



//Striver Code  - Initialize an array to implement Queue(FIFO) using array
==> Time Complexity:
pop function: O(1)
push function: O(1)
top function: O(1)
size function: O(1)
==> Space Complexity: Whole Queue: O(n)

class Queue {

    private int arr[];
    private int start, end, currSize, maxSize;
    public Queue() {
        arr = new int[16];
        start = -1;
        end = -1;
        currSize = 0;
    }
    public Queue(int maxSize) {
        this.maxSize = maxSize;
        arr = new int[maxSize];
        start = -1;
        end = -1;
        currSize = 0;
    }
    public void push(int newElement) {
        //1. check if size is full.
        if (currSize == maxSize) {
            System.out.println("Queue is full\nExiting...");
            System.exit(1);
        }
        if (end == -1) {
            start = 0;
            end = 0;
        } else
            end = (end + 1) % maxSize;
        arr[end] = newElement;
        System.out.println("The element pushed is " + newElement);
        currSize++;
    }
    public int pop() {
        if (start == -1) {
            System.out.println("Queue Empty\nExiting...");
            System.exit(1);
        }
        int popped = arr[start];
        if (currSize == 1) {
            start = -1;
            end = -1;
        } else
            start = (start + 1) % maxSize;
        currSize--;
        return popped;
    }
    public int top() {
        if (start == -1) {
            System.out.println("Queue is Empty");
            System.exit(1);
        }
        return arr[start];
    }
    public int size() {
        return currSize;
    }

}
