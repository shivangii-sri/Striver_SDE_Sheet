//TC = O(N^M) for all nodes, we are checking all possibilities of coloring with all 'm' colours

class solve {
    // Function to determine if graph can be coloured with at most M colours such that no two adjacent vertices of graph are coloured with same colour.
    public boolean graphColoring(boolean graph[][], int m, int n) {
        // Your code here
        int[] color=new int[n];
        
        if(solve(0,graph,color,m,n)==true) return true;
        return false;
    }
    private boolean solve(int node,boolean graph[][],int[] color,int m,int n){
        //base case - if in the process of colouring nodes, you reach the end
        if(node==n) return true;
        
        for(int i=1;i<=m;i++){
            if(isSafe(node,graph,color,i)){
                color[node]=i;
                if(solve(node+1,graph,color,m,n)==true) return true;
                color[node]=0;
            }
        }
        return false;
    }
    private boolean isSafe(int node,boolean graph[][],int[] color,int n){        
        for(int i=0;i<graph.length;i++){            
            if(graph[node][i]){
                if(color[i]==n)
                return false;
            }
        }        
        return true;
    }
}
