//Approach:

class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    public static boolean solve(char[][] board){
        //traverse through each element in nxn board
        for(int i = 0; i<board.length ; i++){
            for(int j=0 ; j<board[0].length ; j++){
                //If empty element found
                if(board[i][j] == '.'){
                    
                    for(char ch = '1' ; ch<= '9' ; ch+=1){ //trial. Try 1 through 9
                        if(isValid(i , j , ch , board) == true){
                            board[i][j] = ch; //Put ch for this cell
                            if(solve(board) == true)
                                return true; //If it's the solution return true
                            board[i][j] = '.'; //Otherwise go backtrack
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    public static boolean isValid(int row , int col , char ch,  char[][] board){
        for(int i=0; i<9 ; i++){
            //check entire row
            if(  board[row][i] == ch) return false;
            // check entire column
            if( board[i][col] == ch) return false;
            // check sub-board
            if( board[3* (row/3) + i/3][3* (col/3) + i%3] == ch) return false;            
        }
        return true;
    }
 
}
