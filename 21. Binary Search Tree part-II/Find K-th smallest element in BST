// SC = O(1), TC = O(N)
// Morris Traversal

class Solution {
     public int kthSmallest(TreeNode root, int k) {         
         TreeNode cur = root;
         TreeNode prev = null;
         int count=0;
         while(cur != null) {
             if(cur.left == null) {
                 count++;
                 if(count == k) {
                    return cur.val;
                 }
                 cur = cur.right;
             }
             else{
                prev = cur.left;
                while(prev.right!=null && prev.right!= cur){
                    prev = prev.right;
                }
                if(prev.right == null){
                    prev.right = cur;
                    cur = cur.left;
                }
                 else{
                     prev.right = null;
                     count++;
                     if(count == k) return cur.val;
                     cur = cur.right;
                                      }
             }//
         } //while close
       return 0;
    }
}

//Optimal | TC=O(K) |  SC = stack space only
class Solution {
    // no need to make the global variables static
    int  count = 0;
    int res = -1;   
    public int kthSmallest(TreeNode root, int k) {        
        inorder(root , k );
        return res;        
    }
    private void inorder(TreeNode root , int k ){
        if(root == null) return;
        
        inorder(root.left , k );
        count++;
        if(count == k) {
            res = root.val;
            return;
        }
        inorder(root.right , k );
    }
}

// Brute Force : TC =O(N) using List to store inorder traversal, SC = O(N) -recursive stack space  
class Solution { 
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> arr = new ArrayList<>();
        buildArray(root , arr);
        return arr.get(k-1);
    }
    public static void buildArray(TreeNode root , List<Integer> arr){
        if(root == null) return;
        buildArray(root.left, arr);
        arr.add(root.val);
        buildArray(root.right , arr);
    }
}
