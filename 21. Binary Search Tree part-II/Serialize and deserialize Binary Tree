public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) return "";
        
        StringBuilder res = new StringBuilder();
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i=0; i< size; i++) {
               TreeNode node = q.poll();
                if(node == null){
                    res.append("null,");
                    continue;
                }
               res.append(node.val+",");
                q.add(node.left);
                q.add(node.right);
            }

        }
        return res.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data=="") return null;
        
        String[] values = data.split(",");
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        
        TreeNode root = new TreeNode(Integer.parseInt(values[0]));
        q.offer(root);
        
        for(int i=1; i<values.length ; i++ ) {
            TreeNode parent = q.poll();
            if(!values[i].equals("null")){
                TreeNode LEFT = new TreeNode(Integer.parseInt(values[i]));
                parent.left = LEFT;               
                q.offer(LEFT);
            }
            if(!values[++i].equals("null")){
                TreeNode RIGHT = new TreeNode(Integer.parseInt(values[i]));
                parent.right = RIGHT;               
                q.offer(RIGHT);
            }
        }
        return root;
    }
}
