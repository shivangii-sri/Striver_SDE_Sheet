import java.util.*; 
class Node implements Comparator<Node>
{
    private int v;
    private int weight;
    
    Node(int _v, int _w) { v = _v; weight = _w; }
    
    Node() {}
    
    int getV() { return v; }
    int getWeight() { return weight; }
    
    @Override
    public int compare(Node node1, Node node2) 
    { 
        if (node1.weight < node2.weight) 
            return -1; 
        if (node1.weight > node2.weight) 
            return 1; 
        return 0; 
    } 
}

class Main
{
    void shortestPath(int s, ArrayList<ArrayList<Node>> adj, int N)
    {
        int dist[] = new int[N];
        
        for(int i = 0;i<N;i++) dist[i] = 100000000;
        dist[s] = 0; 
        
        PriorityQueue<Node> pq = new PriorityQueue<Node>(N, new Node());
        pq.add(new Node(s, 0));
        
        while(pq.size() > 0) {
            Node node = pq.poll();
            
            for(Node it: adj.get(node.getV())) {
                if(dist[node.getV()] + it.getWeight() < dist[it.getV()]) {
                    dist[it.getV()] = dist[node.getV()] + it.getWeight(); 
                    pq.add(new Node(it.getV(), dist[it.getV()]));
                }
            }
        }
        System.out.println("The distances from source "+s+" are : ");
        for (int i = 0; i < N; i++)
        {
            System.out.print( dist[i] + " ");
        }
    }
    public static void main(String args[])
    {
        int n = 5;
        ArrayList<ArrayList<Node> > adj = new ArrayList<ArrayList<Node> >();
		
		for (int i = 0; i < n; i++) 
			adj.add(new ArrayList<Node>());
			
		adj.get(0).add(new Node(1, 2));
		adj.get(1).add(new Node(0, 2));
		
		adj.get(1).add(new Node(2, 4));
		adj.get(2).add(new Node(1, 4));
		
		adj.get(0).add(new Node(3, 1));
		adj.get(3).add(new Node(0, 1));
		
		adj.get(3).add(new Node(2, 3));
		adj.get(2).add(new Node(3, 3));
		
		adj.get(1).add(new Node(4, 5));
		adj.get(4).add(new Node(1, 5));
		
		adj.get(2).add(new Node(4, 1));
		adj.get(4).add(new Node(2, 1));
		
		Main obj = new Main(); 
		obj.shortestPath(0, adj, n); 
		
    }
}



------------------------------- Dad Code ---------------------------

class Solution {
    //Function to find the vertex with minimum distance value, from the set of vertices not yet included in shortest path tree.
    int minDistance( int dist[], boolean sptSet[],int V)
    {
        //initializing minimum value.
        int min = Integer.MAX_VALUE, min_index = 0;        
        for (int v = 0; v < V; v++)

            if (sptSet[v] == false && dist[v] <= min){

                min = dist[v]; min_index = v;

            }        
        return min_index;
    }
    
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.

    int[] dijkstra(int V,  ArrayList<ArrayList<ArrayList<Integer>>> adj,int S) 
    {       
        //creating Adjacency matrix from Adjacency list.

        int [][]adj_mat = new int[V][V];

 
        for(int i=0; i<V; i++)

            for(int j=0; j<adj.get(i).size(); j++)

                adj_mat[i][adj.get(i).get(j).get(0)] = adj.get(i).get(j).get(1);

        

        //dist[] is output list. dist[i] will hold the 

        //shortest distance from source to i.

        int[] dist = new int[V];

    

        //sptSet[i] will true if vertex i is included in shortest

        //path tree or shortest distance from src to i is finalized.

        boolean[] sptSet = new boolean[V];

        

        //initializing all distances as INFINITE and stpSet[] as false.

        for (int i = 0; i < V; i++)
        {
            dist[i] = Integer.MAX_VALUE;
            sptSet[i] = false;
        }        

        //distance of source vertex from itself is always 0.
        dist[S] = 0;        

        //iterating over all vertices.

        for (int count = 0; count < V-1; count++)

        {
            //picking the minimum distance vertex from the set of vertices
            //not yet processed and marking the picked vertex as processed.
            int u = minDistance(dist, sptSet,V);
            sptSet[u] = true;
            
	    //updating dist[] value of adjacent vertices of the picked vertex.
            for (int v = 0; v < V; v++)

            {

                //updating dist[v] only if it's not in sptSet, there is an

                //edge from u to v, and total weight of path from source to

                //v through u is smaller than current value of dist[v].

                if (!sptSet[v] && adj_mat[u][v] !=0 && dist[u] != Integer.MAX_VALUE 

                                            && dist[u]+adj_mat[u][v] < dist[v])

                    dist[v] = dist[u] + adj_mat[u][v];
            }
        }
        //returning the list.
        return dist;
    }
};
