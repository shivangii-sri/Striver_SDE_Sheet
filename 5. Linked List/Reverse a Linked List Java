// Only one approach - Take 3 ptrs:  prev=null, head, next. 
//Iterate in LL, in each iteration reverse the pointer, keep moving all pointers by one forward, return prev.
// TC= O(N) , SC=O(1)

//Leetcode problem 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        while(head != null){
            ListNode next = head.next;
            head.next= prev;
            prev = head;
            head= next;
        }
        return prev;
    }
}
