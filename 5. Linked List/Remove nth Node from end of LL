// Most Optimal
// 1. Make a dummy node, point it to head. Make slow and fast nodes pointing to DUMMY.
// 2. Move fast by n times given in ques. 
// 3. Then move slow and fast both by 1 steps until fast doesnt reach null
// 4. Now slow.next = slow.next.next  , Return dummy.next
TC = O(N) , SC = O(1)

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        //1
        ListNode dummy = new ListNode();
        dummy.next = head;
        ListNode slow=dummy, fast=dummy;
        //2
        for(int i=1; i<=n; i++){
            fast = fast.next;
        }
        //3
        while(fast.next != null){
            slow = slow.next;
            fast = fast.next;
        }
        //4
        slow.next = slow.next.next;
        return dummy.next;
    }
}

//Brute = 
// 1. Find length.
// 2. Then traverse uptill Len-n, assign next pointers as cur.next = cur.next.next. Return head. DONE
// NOTE if Len==n means you have to delete head itself, so return head.next as your head.
