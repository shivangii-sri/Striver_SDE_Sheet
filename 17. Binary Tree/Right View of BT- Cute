// Iteartive solution takes more space - entire tree length BUT recursive soln stack space will be O(height of tree) on avg. So use recursion. Also better crisp code
// Optimal Recursive Code
// TC = O(N) , SC = O(height of tree)

//Approach - We do recursive traversal as "Root Right Left".
// On calling left and right nodes, make sure to incr the level by 1.
// The first node that we get in every new level is added to right view

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        helper(root, res, 0);
        return res;
    }
    public static void helper(TreeNode node, List<Integer> res, int level){
        if(node == null ) return;
        if(level == res.size()) res.add(node.val);
        helper(node.right , res, level+1);
        helper(node.left , res, level+1);
        
    }
}
