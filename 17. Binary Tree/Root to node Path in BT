//TC =O(N) , SC =O(Height)->recusrsive stack space

//InterviewBit Accepted Code
public class Solution {
    public ArrayList<Integer> solve(TreeNode A, int B) {
        ArrayList<Integer> arr = new ArrayList<>();
        if(A==null) return arr;
        getPath(A , arr ,B);
        return arr;
    }
    private boolean getPath(TreeNode node , ArrayList<Integer> res, int B){
        if(node == null ) return false; // if root is NULL  there is no path  
        res.add(node.val);  // push the node's value in 'arr'   
        if(node.val == B) return true; // if it is the required node   return true  
        // else check whether the required node lies in the left subtree or right subtree of the current node
        if(getPath(node.left , res , B) || getPath(node.right , res, B)) {
            return true;
        }
        // required node does not lie either in the left or right subtree of current node. So remove current node's value from 'arr'and then return false
        res.remove(res.size()-1);
        return false;
    }
}
