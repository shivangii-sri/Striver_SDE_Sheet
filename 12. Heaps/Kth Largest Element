// Heap - 
//For kth largest -> we create min heap (OPPOSITE) and vice versa.
//Approach- Iterate in array, keep on pushing elements into heap. In each iteration, check if (heap_size > k) then remove top element. Lastly, return top element of heap.
// ==> TC = O(N logK) [traversing through the entire array and heapifying only k elements int the heap data structure]
// ==> SC = O(k)


class Solution {    
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> minheap = new PriorityQueue<>();        
        for(int e : nums){
           
            minheap.add(e);            
            if(minheap.size() > k) minheap.remove();
        }
        
        return minheap.remove();
    }
}


//Approac 2 - Bruteforce- Using Sorting ==>TC = O(NlogN)

Arrays.sort(nums);
return nums[nums.length - k];
