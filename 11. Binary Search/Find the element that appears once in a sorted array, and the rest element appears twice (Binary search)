// Most Optimal - Binary Search - Single Element in a Sorted Array -> Amazing short code by striver.
//Binary Search - Best optimal code - TC = O(N) , SC = O(1)
/* Explanation .......
Left half -> 
    1st Instance = even index
    2nd Instance = odd  index
    
    In order to check if we are in left half or not: 
        1. if mid is an even index, check if 2nd instance is occuring at the next index or not.
        2. if mid is an odd index,  check if 1st instance is occuring at the prev index or not.
            
        even no. ^ 1 = next no. eg. 4^1 = 100 ^ 1 = 101 = 5 
        odd  no. ^ 1 = prev no. eg. 3^1 =  11 ^ 1 = 10  = 2 
        
*/

class Solution {
    public int singleNonDuplicate(int[] nums) {
       int lo = 0;
       int hi = nums.length-2; //second last, because if the last element is single non-duplicate, our low will shrink to last. High will never shrink.       
       while(lo<=hi){
           int mid = (lo + hi) /2;         
           //check if its in left half of the breakpoint
           if(nums[mid] == nums[mid^1]){
               lo = mid+1;
           }
           else{
               hi = mid-1; 
           }
       }
        return nums[lo];
    }
}



Lengthy Code with lots of if else  :---
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length;
        if(n==1) return nums[0];
        if(nums[0] != nums[1] ) return nums[0];
        if(nums[n-1] != nums[n-2]){
            return nums[n-1];
        }        
        int s=0, e=n-1;
        while(s<=e){
            int m = s + (e-s)/2;
            
            if(nums[m] == nums[m-1]){
                if(m%2 != 0){
                    s = m + 1;
                }
                else{
                    e = m-2;
                }
            }
            else if(nums[m] == nums[m+1]){
                if(m%2 == 0){
                    s = m + 1;
                }
                else{
                    e = m - 1;
                }
            }
            else return nums[m];
        }
        return -1;
    }
}


//Better-XOR , TC = O(N) , SC=O(1)
  public int singleNonDuplicate(int[] nums) {
        int xor = 0;
        for(int i=0; i<nums.length ; i++){
            xor = xor ^ nums[i];    
        }
        return xor;
  }
   

//  Brute Force - Linear Search 
TC = O(N) , SC = O(1)

// Naive - Using HashMap - 
TC = O(N),  SC = O(N)
