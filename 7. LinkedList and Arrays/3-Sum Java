// Most Optimal
//1. Sort the array
//2. for (i=0 to 3rd last), search by using Two-Pointers with left=i+1 and right=n-1
//3. if you find any triplet where 3 sums up to 0, make a list and add it to your res. NOW ensure to skip duplicates for left and right
//4. if not  find, move either left or right acc to the sum value.
//5. Skip duplicates of i as well.
//return res storing all the triplets
//==>TC = O(NlogN ) + O(N^2)    ==> SC = O(m),m=no.of unique triplets

//My solution
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums.length <=2) return res;   
        //1. Sort the list
        Arrays.sort(nums);
        int n = nums.length;        
        for(int i=0; i<n -2; i++){ // up till 3rd last element
            int left = i+1 , right=n-1;           
            while(left < right){
                if(nums[left]+nums[right] == -nums[i]){
                    // got our triplet, store it.
                    List<Integer> triplet = new ArrayList<Integer>();
                    triplet.add(nums[i]);
                    triplet.add(nums[left]);
                    triplet.add(nums[right]);
                    res.add(triplet);
                    while(left<right && nums[left] == triplet.get(1)) left++;    //Skip DUPLICATES if you got triplet
                    while(left<right && nums[right] == triplet.get(2)) right--;  //Skip DUPLICATES if you got triplet
                    
                }
                else if(nums[left]+nums[right] < -nums[i]) left++;
                else right--;
            }
            while(i+1<n-2 && nums[i] == nums[i+1]) i++;
        }
        return res;
    }
}
//Striver Solution for Most optimal
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
       //Sort the list
       Arrays.sort(nums);       
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        for(int i=0 ; i<nums.length-2; i++){
            int lo=i+1;
            int hi=nums.length-1;
            int targetSum = 0-nums[i];
            while(lo < hi) {
                if(nums[lo] + nums[hi] == targetSum){
                    res.add(Arrays.asList(nums[i] , nums[lo] , nums[hi])); //CHANGES here                  
                    while(lo<hi && nums[lo] == nums[lo+1]) lo++;  //CHANGES here
                    while(hi>lo && nums[hi] == nums[hi-1]) hi--;  //CHANGES here
                    lo++;
                    hi--;
                } 
                else if(nums[lo] + nums[hi] < targetSum)  lo++;
                else hi--;
            }            
            while(i<nums.length-2 && nums[i] == nums[i+1]) i++;
        }        
    return res;
    }
}



// BRUTE FORCE
//1. To find triplets, Run 3 nested loops -> i=0 to n , j=i+1 to n, k=j+1 to n
//2. if you get a triplet , Make a list of it, sort it and store in a set 
// 3. COnvert Set<List> into List<List> and return res
// TC = O(N^3) , SC = O(m), m= no. of triplets

// Mostly right but giving TLE
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
    // BRUTE FORCE
       Set<List<Integer>> res = new HashSet<List<Integer>>();
    
        int n = nums.length;     
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                
                for(int k=j+1; k<n; k++){
                    // Got triplet ? then store it
                    if(nums[i]+ nums[j]+nums[k] == 0){
                        List<Integer> tri  =  new ArrayList<Integer>();
                        tri.add(nums[i]);
                        tri.add(nums[j]);
                        tri.add(nums[k]);
                        Collections.sort(tri); //MOST IMP PART
                        res.add(tri);
                    }
                }
            }
        }
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        for(List<Integer> li : res){
            ans.add(li);
        }
       return ans;
    }
}
