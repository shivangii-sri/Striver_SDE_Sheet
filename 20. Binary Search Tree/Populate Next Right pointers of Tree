//Best Solution - Recursion - Preorder
//Approach: Given next pointers are set to null initially.
1. base case - if root is null, return null
2. Check if root is the last level or not. If it is last level, return root.
3. If not the last level, : make 2 checks for root.next pointer:
    a. if root.next is null,     point root.right.next to null.
    b. if root.next is not null, point root.right.next to root.next.left.
    c. Lastly, after this if else, do point root.left.next = root.right;
4. After performing these operations, make recursive calls for left and right. Preorder (Ro L R)
==> TC = O(N) , SC = O(1), ignoring stack space as ques says

class Solution {
    public Node connect(Node root) {
        if(root == null) return null;
        //1. 
        if(root.left!=null) {
            if(root.next!=null){
                root.right.next = root.next.left;
            }
            else{
                root.right.next = null;
            }
            root.left.next = root.right;
            
            connect(root.left);
            connect(root.right);
        }
        return root;
    }
}

//My Another good solution- Only 1 queue - using BFS and smartness to point next ptrs
// TC = O(N) , SC = O(N) -> for queue

class Solution {
    public Node connect(Node root) {
        if(root == null) return root;
        
        Queue<Node> q = new LinkedList<Node>();
        q.offer(root);
        
        while(!q.isEmpty()){
            int size = q.size();
            
            for(int i=0; i<size; i++){
                Node node = q.poll();
               
                //1. If the node is the only node of level (eg root), or the last node of the level- point the next ptr to null.
                if((q.isEmpty() == true) || (i==size-1)){
                    node.next = null;
                }
                //2. else, point the next ptr to the node lying next in the bfs queue after node.
                else{
                    node.next = q.peek();
                }
                
                //3. Add left and right nodes into q. Since its a perfect BT, if left exist then right will also exist.
                if(node.left != null){
                    q.offer(node.left);
                    q.offer(node.right);
                }
            }
        }
        return root;
    }
}
