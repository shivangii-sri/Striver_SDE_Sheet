// Most Optimal
//==> Input: s = "aab"   ==> Output: [["a","a","b"],["aa","b"]]
// TC = ? 


class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<List<String>>();
        List<String> path  = new ArrayList<>();      
        helper(0, s, path, ans);
        return ans;
    }
    
    private void helper(int ind, String s, List<String> path, List<List<String>> ans){
        //base case
        if(ind == s.length()){
            ans. add(new ArrayList<>(path));
            return;
        }
        // loop through all indices
        for(int i=ind ; i<s.length() ; i++){
            if(isPalindrome(s, ind , i) == true){
                path.add(s.substring(ind, i+1));
                helper(i+1 , s, path, ans);
                path.remove(path.size()-1);
            }
        }
    }
    // to check Palindrome
    public static boolean isPalindrome(String s , int start, int end){
        while(start<end){
            if(s.charAt(start++) != s.charAt(end--)){
                return false;
            }
        }
        return true;
    }
}
