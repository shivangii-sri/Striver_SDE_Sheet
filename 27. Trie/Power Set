//Solution 1: Using bit manipulation - TUF Soluiton link:- https://takeuforward.org/data-structure/power-set-print-all-the-possible-subsequences-of-the-string/
//1. Basically, we traverse from 0 to 2^(n)-1 and check for every number if their bit is set or not. If the bit is set add that character to your subsequence.
// TC: O(2^n * n) , Reason: O(2^n) for the outer for loop and O(n) for the inner for loop.
// SC: O(1)


class Solution
{
    public List<String> AllPossibleStrings(String s)
    {
        List<String> ans = new ArrayList<String>(); 
        int n = s.length();
        //1. Iterating in all 2^N decimal numbers
        for(int num=0 ; num< (1<<n) ; num++){ 
            String sub="";
            //2. iterate over every bit in binary form of num. Eg for num=5, iterate in 101
            for(int i=0; i<n ; i++){
                //3. check if the ith bit is set or not.
                if((num & (1<<i)) != 0  ) {//if set
                    sub+=s.charAt(i);
                }
            }
            if(sub.length()>0)
                ans.add(sub);
        }
        Collections.sort(ans);
        return ans;
    }
}


// More Optimal - using Recursion (Simple Subset ques, pick and not pick to form all subsets)
// TC : O(2^n)
// SC : O(n), recursion stack.
