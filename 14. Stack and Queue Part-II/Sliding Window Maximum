//Most OPtimal - SLiding window- using dequeue
==> TC= O(N)+O(N)
==> SC = O(K) , bcz dequeue size is kept upto k size

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int res[] = new int[n-k+1]; //ans array to store max of each window
        int it = 0;
        
        Deque<Integer> q = new ArrayDeque<Integer>(); //note-we store index in deque
        
        for(int i=0; i<nums.length ; i++){
            //remove numbers out of bound index, i.e remove the index not in window range as window keeps sliding by one.
            
            if(!q.isEmpty() && q.peek()==i-k){
                q.poll();
            }
            //remove smaller elements in k range as they are useless
            while(!q.isEmpty() && nums[q.peekLast()] < nums[i]) {
                q.pollLast();
            }
            q.offer(i);
            if(i>= k-1){
                res[it++] = nums[q.peek()];
            }
            
        }
        return res;
    }
}

// BRUTE force - TC=O(n * k) , SC=O(1)

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int res[] = new int[nums.length-k+1];
         
        for(int i=0; i<= nums.length-k ; i++){
            int maxi = nums[i];
            for(int j=i; j <= i+k-1 ; j++){
                maxi = Math.max(maxi , nums[j]);
            }
            res[i] = maxi ; 
        }
        return res;
    }
}
